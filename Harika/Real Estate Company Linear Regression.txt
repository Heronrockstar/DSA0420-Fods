import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

np.random.seed(42)
data = pd.DataFrame({
    'size': np.random.randint(500, 4000, 100),
    'bedrooms': np.random.randint(1, 5, 100),
    'location': np.random.choice(['Location1', 'Location2', 'Location3'], 100),
    'price': np.random.randint(100000, 500000, 100)
})

print(data.isnull().sum())

plt.figure(figsize=(10, 6))
sns.scatterplot(x='size', y='price', data=data)
plt.title('House Size vs. Price')
plt.xlabel('Size (square feet)')
plt.ylabel('Price ($)')
plt.show()

X = data[['size']]
y = data['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error (MAE): {mae:.2f}')
print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')
print(f'R-squared (R2): {r2:.2f}')


plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Prices')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted Prices')
plt.title('House Size vs. Price')
plt.xlabel('Size (square feet)')
plt.ylabel('Price ($)')
plt.legend()
plt.show()
